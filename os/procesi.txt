#include <sys/types.h>
#include <unistd.h>

pid_t fork();
pid_t getpid();
pid_t getppid();

uint sleep(uint sec);

#include <stdlib.h>
void exit(int status);


pid_t wait(int* status-ptr);			Proces koji je pozvao funkciju se zaustavlja dok se ne završi proces dete.
pid_t waitpid(pid_t pid, int* status-ptr);	Funkcija wait zaustavlja proces dok se ne završi bilo koji proces dete, a funkcija
						waitpid dok se ne završi proces dete čiji je PID specificiran.
						Promenljiva status-ptr prihvata exit kod sa koji se završio proces dete

int execl(const char *path, const char *arg, ...);
int execv(const char *path, char *const argv[]);
int execlp(const char *file, const char *arg, ...);
int execvp(const char *file, char *const argv[]);




NITI
#include <pthread.h>
gcc -lpthread


int pthread_create(pthread_t *threadhandle, pthread_attr_t *attribute, void *(*start_routine)(void*), void* arg);

int pthread_join(pthread_t threadhandle, void** return_value);




MUTEX
pthread_mutex_t
int pthread_mutex_init(pthread_mutex_t* mutex, pthread_mutexattr_t* attr);
int pthread_mutex_destroy(pthread_mutex_t* mutex);

int pthread_mutex_lock(pthread_mutex_t* mutex);
int pthread_mutex_unlock(pthread_mutex_t* mutex);




USLOVNE PROMENLJIVE
pthread_cond_t

int pthread_cond_init(pthread_cond_t* cond, pthread_attr_t* attr);
int pthread_cond_destroy(pthread_cond_t* cond);

int pthread_cond_wait(pthread_cond_t* cont, pthread_mutex_t* mutex);
int pthread_cond_signal(pthread_cond_t* cond);
int pthread_cond_broadcast(pthread_cond_t* cond);




POSIX SEMAFORI
#include <semaphore.h>
sem_t

int sem_init(sem_t* sem, int pshared, uint value);  pshared uvek 0 jer ih koristimo samo za niti, value pocetna vrednost
int sem_destroy(sem_t* sem);
int sem_wait(semt_t* sem);
int sem_post(sem_t* sem);



SYSTEM V SEMAFORI
#include <system/sem.h>
#include <system/types.h>
#include <system/ipc.h>
int semget(key_t key, int nsems, int flag);  kreira novi semafor. key je jedinstveni identifikator a nsems broj int promenljivih.
					     flag rezultat or (|) operacije ( 0666 svi korisnici sve privilegije, IPC_CREAT - kreira sem ukoliko ne postoji
														  IPC_EXCL - zahteva da sem ne postoji)
					     vraca referencu semafora a u slucaju greske -1

int semop(int semid, struct sembuf* semops, int nsops);
semid - referenca dobijena pozivom semget
semops - niz operacija koje treba izvrsiti nad semaforom
nsops - broj elemenata niza sa operacijama

struct sembuf {
  ushort sem_num;	indeks celobrojne promenljive na koju se odnosi operacija
  short sem_op;		> 0 semsignal, < 0 sempost, 0 blokira se proces koji je pozvao dok neka vrednost ne postane nula
  short sem_flg;	NULL
}

semop vraca 0 ako je sve kako treba, -1 ako je greska


int semctl(int semid, int semnum, int cmd, union semun arg);
semid - referenca dobijena pozivom semget;
semnun - indeks celobrojne promenljive na koju se operacije odnose
cmd - definiše operaciju koju treba izvršiti nad semaforom. predstavlja broj elemenata niza sa operacijama
arg - parametri operacije

union semun
{
int val;
struct semid_ds *buf;
ushort *array;
struct seminfo * __buf;
void * __pad;
};

SETVAL – definiše vrednost odgovarajuće celobrojne vrednosti System V semafora
IPC_RMID – brisanje System V semafora iz sistema

semctl(sid, 0, IPC_RMID, 0); - brisanje semafora 
semctl(sid, 0, SETVAL, semopts) == -1 - sem[0] se inicijalizuje na 1