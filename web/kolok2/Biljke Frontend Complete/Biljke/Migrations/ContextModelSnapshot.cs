// <auto-generated />
using System;
using Biljke.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biljke.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BiljkaOsobina", b =>
                {
                    b.Property<int>("BiljkeID")
                        .HasColumnType("int");

                    b.Property<int>("OsobineID")
                        .HasColumnType("int");

                    b.HasKey("BiljkeID", "OsobineID");

                    b.HasIndex("OsobineID");

                    b.ToTable("BiljkaOsobina");
                });

            modelBuilder.Entity("Biljke.Models.Biljka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Biljke");
                });

            modelBuilder.Entity("Biljke.Models.NepoznataBiljka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.HasKey("ID");

                    b.ToTable("NepoznateBiljke");
                });

            modelBuilder.Entity("Biljke.Models.Osobina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Vrednost")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Osobine");
                });

            modelBuilder.Entity("Biljke.Models.Podrucje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Podrucja");
                });

            modelBuilder.Entity("Biljke.Models.Vidjenja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BiljkaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumIVreme")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("PodrucjeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BiljkaID");

                    b.HasIndex("PodrucjeID");

                    b.ToTable("Vidjenja");
                });

            modelBuilder.Entity("NepoznataBiljkaOsobina", b =>
                {
                    b.Property<int>("NepoznateBiljkeID")
                        .HasColumnType("int");

                    b.Property<int>("OsobineID")
                        .HasColumnType("int");

                    b.HasKey("NepoznateBiljkeID", "OsobineID");

                    b.HasIndex("OsobineID");

                    b.ToTable("NepoznataBiljkaOsobina");
                });

            modelBuilder.Entity("BiljkaOsobina", b =>
                {
                    b.HasOne("Biljke.Models.Biljka", null)
                        .WithMany()
                        .HasForeignKey("BiljkeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biljke.Models.Osobina", null)
                        .WithMany()
                        .HasForeignKey("OsobineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biljke.Models.Vidjenja", b =>
                {
                    b.HasOne("Biljke.Models.Biljka", "Biljka")
                        .WithMany("Videnja")
                        .HasForeignKey("BiljkaID");

                    b.HasOne("Biljke.Models.Podrucje", "Podrucje")
                        .WithMany("Videnja")
                        .HasForeignKey("PodrucjeID");

                    b.Navigation("Biljka");

                    b.Navigation("Podrucje");
                });

            modelBuilder.Entity("NepoznataBiljkaOsobina", b =>
                {
                    b.HasOne("Biljke.Models.NepoznataBiljka", null)
                        .WithMany()
                        .HasForeignKey("NepoznateBiljkeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biljke.Models.Osobina", null)
                        .WithMany()
                        .HasForeignKey("OsobineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biljke.Models.Biljka", b =>
                {
                    b.Navigation("Videnja");
                });

            modelBuilder.Entity("Biljke.Models.Podrucje", b =>
                {
                    b.Navigation("Videnja");
                });
#pragma warning restore 612, 618
        }
    }
}
